package service

import objects.{Apple, Discounts, Orange}
import org.scalatest.funsuite.AnyFunSuite

class CheckoutTest extends AnyFunSuite{

  test("that an apple has a price of 60 pence") {
    val applePrice = Apple.price
    assert(applePrice === 60)
  }

  test("that an orange has a price of 25 pence") {
    val orangePrice = Orange.price
    assert(orangePrice === 25)
  }

  test("that checkout can add prices of an apple and orange") {
    val itemsToCheckout = List("Apple", "Orange")
    val testTotalPrice = Checkout.run(itemsToCheckout)
    assert(testTotalPrice == "£0.85")
  }

  test("that the total discount generated by the buy one get one free discount on apples works for an even number of apples") {
    val totalNumberOfApples: Int = 4
    val testDiscount = Discounts.apply(totalNumberOfApples, 0)
    assert(testDiscount === 120)
  }

  test("that the total discount generated by the buy one get one free discount on apples works for an odd number of apples") {
    val totalNumberOfApples: Int = 5
    val testDiscount = Discounts.apply(totalNumberOfApples, 0)
    assert(testDiscount === 120)
  }

  test("that the discount (buy one get one free) for apples is applied correctly in the checkout") {
    val itemsToCheckout = List("Apple", "Apple", "Apple", "Apple")
    val testTotalPrice = Checkout.run(itemsToCheckout)
    assert(testTotalPrice == "£1.20")
  }

  test("that the total discount generated by the buy one get one free discount on oranges works for a non-multiple of three oranges") {
    val totalNumberOfOranges: Int = 4
    val testDiscount = Discounts.apply(0, totalNumberOfOranges)
    assert(testDiscount === 25)
  }

  test("that the total discount generated by the buy one get one free discount on oranges works for a multiple of three oranges") {
    val totalNumberOfOranges: Int = 6
    val testDiscount = Discounts.apply(0, totalNumberOfOranges)
    assert(testDiscount === 50)
  }

  test("that the discount (buy two get one free) for oranges is applied correctly in the checkout") {
    val itemsToCheckout = List("Orange", "Orange", "Orange")
    val testTotalPrice = Checkout.run(itemsToCheckout)
    assert(testTotalPrice == "£0.50")
  }

  test("that both the discounts can be applied at the checkout correctly") {
    val itemsToCheckout = List("Orange", "Orange", "Orange", "Orange", "Apple", "Apple", "Apple")
    val testTotalPrice = Checkout.run(itemsToCheckout)
    assert(testTotalPrice == "£1.95")
  }

}
